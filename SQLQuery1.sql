create database QUAN_LY_KHO_NOBLE use QUAN_LY_KHO_NOBLE;  CREATE TABLE PHAN_QUYEN( 	ID_QUYEN NCHAR(10) PRIMARY KEY, 	TEN_QUYEN NVARCHAR(50) ); CREATE TABLE BO_PHAN( 	ID_BOPHAN NCHAR(10) PRIMARY KEY, 	TEN_BOPHAN NVARCHAR(50) );  CREATE TABLE CHUC_VU( 	ID_CV NCHAR(10) PRIMARY KEY, 	TEN_CV NVARCHAR(30) );  CREATE TABLE NHAN_VIEN( 	ID_NV NCHAR(10) PRIMARY KEY, 	VIET_TAT NVARCHAR(10) UNIQUE , 	TEN_NV NVARCHAR(50), 	ID_BOPHAN NCHAR(10) FOREIGN KEY REFERENCES BO_PHAN(ID_BOPHAN), 	ID_CV NCHAR(10) FOREIGN KEY REFERENCES CHUC_VU(ID_CV) );  CREATE TABLE ACCOUNT( 	NAME_USER NCHAR(10) PRIMARY KEY, 	PASS_USER NCHAR(30), 	ID_QUYEN NCHAR(10) FOREIGN KEY REFERENCES PHAN_QUYEN(ID_QUYEN) );  CREATE TABLE NCC ( 	ID_NCC NCHAR(10) PRIMARY KEY, 	TEN_NCC NVARCHAR(100), 	DIACHI NVARCHAR(200), 	NOTE NVARCHAR(70), 	VIET_TAT NVARCHAR(20) UNIQUE );  CREATE TABLE NHOM_VTU( 	ID_NHOMVTU NCHAR(10) PRIMARY KEY, 	TEN_NHOMVTU NVARCHAR(50) );  CREATE TABLE DVT( 	ID_DVT NCHAR(10) PRIMARY KEY, 	DVT NVARCHAR(20) );  CREATE TABLE VAT_TU( 	ID_VTU NCHAR(10) PRIMARY KEY, 	VIET_TAT NVARCHAR(20) UNIQUE, 	TEN_VTU NVARCHAR(100), 	ID_DVT NCHAR(10) FOREIGN KEY REFERENCES DVT(ID_DVT), 	ID_NHOMVTU NCHAR(10) FOREIGN KEY REFERENCES NHOM_VTU(ID_NHOMVTU), 	NOTE NVARCHAR(70), );  CREATE TABLE PHIEU_NHAP( 	ID_PN NVARCHAR(20) PRIMARY KEY, 	NGAY_NHAP DATE, 	NGAY_CHUNG_TU DATE, 	ID_NCC NCHAR(10) FOREIGN KEY REFERENCES NCC(ID_NCC), 	ID_NV NCHAR(10) FOREIGN KEY REFERENCES NHAN_VIEN(ID_NV), 	NOTE NVARCHAR(50) ); CREATE TABLE CTPN( 	ID_PN NVARCHAR(20) FOREIGN KEY REFERENCES PHIEU_NHAP(ID_PN), 	ID_VTU NCHAR(10) FOREIGN KEY REFERENCES VAT_TU(ID_VTU), 	SO_LUONG INT );  CREATE TABLE TON_KHO( 	ID_VTU NCHAR(10) FOREIGN KEY REFERENCES VAT_TU(ID_VTU), 	SO_LUONG DOUBLE ); -------------------------------------------------------------------- CREATE OR ALTER FUNCTION AUTO_VTU() RETURNS NCHAR(10) AS BEGIN 	DECLARE @ID  NCHAR(10) 	IF (SELECT COUNT(ID_VTU) FROM VAT_TU) = 0 		SET @ID = '0' 	ELSE 		SELECT @ID = MAX(RIGHT(ID_VTU, 8)) FROM VAT_TU 		SELECT @ID = CASE 			WHEN @ID >= 0 and @ID < 9 THEN 'VT000000' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 			WHEN @ID >= 9 THEN 'VT00000' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 			WHEN @ID >= 99 THEN 'VT0000' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 			WHEN @ID >= 999 THEN 'VT000' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 			WHEN @ID >= 9999 THEN 'VT00' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 			WHEN @ID >= 99999 THEN 'VT0' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 		END 	RETURN @ID END;  -- AUTO ID NV CREATE OR ALTER FUNCTION AUTO_IDNV() RETURNS NCHAR(10) AS BEGIN 	DECLARE @ID  NCHAR(10) 	IF (SELECT COUNT(ID_NV) FROM NHAN_VIEN) = 0 		SET @ID = '0' 	ELSE 		SELECT @ID = MAX(RIGHT(ID_NV, 8)) FROM NHAN_VIEN 		SELECT @ID = CASE 			WHEN @ID >= 0 and @ID < 9 THEN 'NV000000' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 			WHEN @ID >= 9 THEN 'NV00000' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 			WHEN @ID >= 99 THEN 'NV0000' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 			WHEN @ID >= 999 THEN 'NV000' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 			WHEN @ID >= 9999 THEN 'NV00' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 			WHEN @ID >= 99999 THEN 'NV0' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 		END 	RETURN @ID END;  -- AUTO ID NCC CREATE OR ALTER FUNCTION AUTO_NCC() RETURNS NCHAR(10) AS BEGIN 	DECLARE @ID  NCHAR(10) 	IF (SELECT COUNT(ID_NCC) FROM NCC) = 0 		SET @ID = '0' 	ELSE 		SELECT @ID = MAX(RIGHT(ID_NCC, 7)) FROM NCC 		SELECT @ID = CASE 			WHEN @ID >= 0 and @ID < 9 THEN 'NCC00000' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 			WHEN @ID >= 9 THEN 'NCC0000' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 			WHEN @ID >= 99 THEN 'NCC000' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 			WHEN @ID >= 999 THEN 'NCC00' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 			WHEN @ID >= 9999 THEN 'NCC0' + CONVERT(NCHAR, CONVERT(INT, @ID) + 1) 		END 	RETURN @ID END;  SELECT * FROM VAT_TU   CREATE OR ALTER FUNCTION AUTO_PN(@NgayNhap DATE)
RETURNS NVARCHAR(20)
AS
BEGIN
    DECLARE @MaPhieuNhap NVARCHAR(20)
    DECLARE @SoLuongPhieuTrongNgay INT
    DECLARE @Thang NVARCHAR(2)
    DECLARE @Nam NVARCHAR(4)

    -- Lấy số lượng phiếu trong ngày (số lượng phiếu hiện tại trong ngày cộng với 1)
    SET @SoLuongPhieuTrongNgay = (
        SELECT COUNT(*) + 1
        FROM PHIEU_NHAP
        WHERE CONVERT(DATE, NGAY_NHAP) = @NgayNhap
    )

    -- Lấy tháng và năm từ ngày nhập
    SET @Thang = FORMAT(@NgayNhap, 'MM')
    SET @Nam = FORMAT(@NgayNhap, 'yyyy')

    -- Tạo mã phiếu nhập với định dạng "PN-001-MM/yyyy"
    SET @MaPhieuNhap = 'PN-' + RIGHT('000' + CAST(@SoLuongPhieuTrongNgay AS NVARCHAR), 3) + '-' + @Thang + '/' + @Nam

    RETURN @MaPhieuNhap
END;
   -------------------------TRIGER-------------------------------- CREATE TRIGGER TRI_TONKHO_NHAP
ON CTPN
AFTER INSERT
AS
BEGIN
    SET NOCOUNT ON;

    -- Cập nhật tồn kho nếu đã tồn tại mã hàng
    UPDATE TonKho
    SET SoLuongTon = SoLuongTon + i.SoLuong
    FROM TonKho t
    INNER JOIN inserted i ON t.MaHang = i.MaHang;

    -- Thêm mới vào tồn kho nếu chưa tồn tại mã hàng
    INSERT INTO TonKho (MaHang, SoLuongTon)
    SELECT i.MaHang, i.SoLuong
    FROM inserted i
    LEFT JOIN TonKho t ON i.MaHang = t.MaHang
    WHERE t.MaHang IS NULL
END;


